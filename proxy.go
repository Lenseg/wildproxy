package main

import (
	"net"
	"net/http"
	"net/http/httputil"

	log "github.com/sirupsen/logrus"
)

var (
	proxy *httputil.ReverseProxy

	srv *http.Server
)

func StartServer() {
	proxy = newProxy()

	srv = &http.Server{
		Addr:         httpHost,
		Handler:      filterRequest(proxy),
		ReadTimeout:  clientTimeout,
		WriteTimeout: clientTimeout,
	}
	log.Fatal(srv.ListenAndServe())
}

func newProxy() *httputil.ReverseProxy {
	var tr http.RoundTripper
	dialer := &net.Dialer{
		Timeout:   upstreamTimeout,
		KeepAlive: upstreamTimeout,
	}
	tr = &http.Transport{
		DialContext: dialer.DialContext,
	}

	if log.IsLevelEnabled(log.DebugLevel) {
		tr = &LoggingTransport{tr}
	}

	if anonMode {
		tr = &AnonTransport{tr}
	}

	tr = &SafeTransport{tr}

	return &httputil.ReverseProxy{
		Director:       proxyRequest,
		ModifyResponse: proxyResponse,
		Transport:      tr,
	}
}

// Middleware to filter incoming requests before they are sent to the proxy
func filterRequest(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Return 204 for favicon requests
		if isFavicon(r) {
			w.WriteHeader(204)
			return
		}
		// request is valid, proxy it
		h.ServeHTTP(w, r)
	})
}

// Return true if this is a request for a favicon auto generated by a browser
func isFavicon(r *http.Request) bool {
	faviconPaths := []string{
		"/favicon.ico",
		"/apple-touch-icon-precomposed.png",
		"/apple-touch-icon.png",
	}
	path := r.URL.EscapedPath()
	for _, fp := range faviconPaths {
		if path == fp {
			return true
		}
	}
	return false
}
